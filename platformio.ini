[platformio]
src_dir = src/vario
# OR!!
# Change me to the test you want to run
; src_dir = utils/SD_Card_Testing/Stress_Test

# Environment a new user should probably be using if they don't select a different one
default_envs = leaf_3_2_5_release

# Variants have their own configs.
extra_configs = 
	src/variants/*/platformio.ini

# Mostly taken from 
# https://github.com/sivar2311/ESP32-S3-PlatformIO-Flash-and-PSRAM-configurations?tab=readme-ov-file#esp32-s3-fn8
[env:_base]

# See documentation in scripts for expected configuration variables
extra_scripts =
	pre:src/scripts/versioning.py
	post:src/scripts/rename_firmware.py

# platform = espressif32  # Old, default platform
# https://github.com/pioarduino/platform-espressif32
platform = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip
board = esp32-s3-devkitc-1
framework = arduino

board_build.flash_mode = qio
board_upload.flash_size = 8MB
board_upload.maximum_size = 8388608

build_flags =
	-D PIO_BUILD_SYSTEM
	-D ETL_TARGET_OS_FREERTOS

# ~3.2Mb for A and B partitions to allow for updates
board_build.partitions = default_8MB.csv

lib_extra_dirs = src/libraries

# Pin all dependencies to a specific version for repeatability.
# https://docs.platformio.org/en/latest/core/userguide/pkg/cmd_install.html#package-specifications
lib_deps = 
	; STL like library for Arduino platform and embedded systems
	etlcpp/Embedded Template Library@20.39.4

	; WiFi Manager for configuring WiFi credentials over captive portal 
	WiFiManager@2.0.17

	; IGC Logger
	https://github.com/scottyob/IgcLogger.git#v0.0.3

	; Fanet manager
	; https://github.com/scottyob/fanet-plus.git#9336a94a9085b8b235385b3a59a5dcb983bda6bd

	; Ries's Fanet Library
	https://github.com/scottyob/FANET.git#f7c1e2fd4182bcd1271353eb4f50934b18a243ea

	; Ries's FLARM Library
	https://github.com/rvt/FLARM.git

	; RadioLib for LoRa / Fanet
	jgromes/RadioLib@7.1.2

	; For reduced memory BLE Server Support
	h2zero/NimBLE-Arduino@2.2.3

	; I2C IO-Expander 
	robtillaart/TCA9555@0.4.1

	; JSON parser and encoder
	bblanchon/ArduinoJson@7.3.1

[env:_release]
extends = env:_base
build_unflags = -D ARDUINO_USB_MODE
build_flags = 
	${env:_base.build_flags}
	-D ARDUINO_USB_MODE=0
    -D ARDUINO_USB_CDC_ON_BOOT=1 # Required for USB Serial on boot (for debugging)  
    -D ARDUINO_USB_MSC_ON_BOOT=0
    -D ARDUINO_USB_DFU_ON_BOOT=0


[env:_dev]
extends = env:_base
build_flags = 
	${env:_base.build_flags}
	-D DEBUG_WIFI  # Enables WiFi on boot, enables webserver, does not disable Wifi after setup
	-D DEBUG_FATALERROR_COREDUMP  # Enables core dump via assert(0) on fatal errors (instead of restarting after holding key)
	-D DISABLE_MASS_STORAGE  # Disables mass storage on SD card mount
	; -D MEMORY_PROFILING  # Enables memory profiling troubleshooting features
	-D ARDUINO_USB_MODE=1
	-D ARDUINO_USB_CDC_ON_BOOT=1  # Required for USB Serial on boot (for debugging)  

  

build_type = debug  # Might be useful when looking at stack traces
# Used to take exception traces and decode them to meaningful errors
monitor_filters = esp32_exception_decoder




[env:TestUtil]
# Test utilities!  Nothing to do with the main project, but, handy for running test code
platform = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip
board = esp32-s3-devkitc-1
framework = arduino
build_flags = 
	-D ARDUINO_USB_MODE=1
	-D ARDUINO_USB_CDC_ON_BOOT=1  # Required for USB Serial on boot (for debugging)  
